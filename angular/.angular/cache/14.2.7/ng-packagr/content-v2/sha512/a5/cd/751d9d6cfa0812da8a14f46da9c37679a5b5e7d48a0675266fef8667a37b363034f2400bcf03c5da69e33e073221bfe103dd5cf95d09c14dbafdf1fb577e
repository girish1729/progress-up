{"hash":"23128824c88662f72130f4a4bd6abf703b216d44","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpRequest, HttpEventType, HttpResponse } from '@angular/common/http';\nimport { faFileAlt, faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\nimport * as i2 from '@fortawesome/angular-fontawesome';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\nclass ProgressUpService {\n    constructor(http) {\n        this.http = http;\n        this.config = {\n            filesArray: \"mFiles\",\n            uploadURL: \"https://localhost:2324/uploadmultiple\"\n        };\n    }\n    upload(file) {\n        const formData = new FormData();\n        formData.append(this.config.filesArray, file);\n        const req = new HttpRequest('POST', this.config.uploadURL, formData, {\n            reportProgress: true,\n            responseType: 'json'\n        });\n        return this.http.request(req);\n    }\n}\nProgressUpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\nProgressUpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\nclass ProgressUpComponent {\n    constructor(uploadService) {\n        this.uploadService = uploadService;\n        this.progress = {};\n        this.showProgress = true;\n        this.fileLoaded = 0;\n        this.faFileAlt = faFileAlt;\n        this.faCloudUploadAlt = faCloudUploadAlt;\n        this.uploadFiles = [];\n    }\n    uploadOneFile(file) {\n        this.uploadService.upload(file).subscribe((event) => {\n            if (event.type === HttpEventType.UploadProgress) {\n                if (event.total) {\n                    const total = event.total;\n                    this.progress[file.name] = Math.round(100 * event.loaded / total);\n                }\n            }\n            else if (event instanceof HttpResponse) {\n                console.log(event);\n            }\n        }, err => {\n            this.progress[file.name] = 0;\n        });\n    }\n    onFileUpload(event) {\n        let files = event.target.files;\n        if (files) {\n            for (let i = 0; i < files.length; i++) {\n                let file = files[i];\n                this.uploadOneFile(file);\n                this.uploadFiles.push(file);\n            }\n        }\n    }\n    clearAll() {\n        this.showProgress = false;\n    }\n}\nProgressUpComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpComponent, deps: [{ token: ProgressUpService }], target: i0.ɵɵFactoryTarget.Component });\nProgressUpComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.8\", type: ProgressUpComponent, selector: \"lib-progress-up\", ngImport: i0, template: \"\\n<div class=\\\"progress-up-wrapper\\\">\\n\\n <div class='text-center'>\\n   <button (click)=\\\"clearAll()\\\" class=\\\"clearButton\\\" role=\\\"button\\\">Clear all</button>\\n </div>\\n\\n <form class='progress-up-form' action=\\\"#\\\">\\n      <input type=\\\"file\\\" #fileInput (change)=\\\"onFileUpload($event)\\\" multiple hidden />\\n        <span (click)=\\\"fileInput.click()\\\" >\\n\\t<fa-icon [icon]=\\\"faCloudUploadAlt\\\" size=\\\"8x\\\"></fa-icon>\\n        <h2>Browse Files to Upload</h2>\\n\\t</span>\\n </form>\\n\\n <section *ngIf=\\\"showProgress\\\" class='progress-up-area' >\\n   <div *ngFor=\\\"let file of uploadFiles\\\">\\n    <li class=\\\"row\\\">\\n        <fa-icon [icon]=\\\"faFileAlt\\\"></fa-icon>\\n          <div class=\\\"content\\\">\\n                <div class=\\\"details\\\">\\n                   <span class=\\\"name\\\">{{file.name}} </span>\\n                    <span class=\\\"percent\\\">{{progress[file.name]}} %</span>\\n                 </div>\\n                 <div class=\\\"progress-bar\\\">\\n                    <div class=\\\"progress\\\" style=\\\"width: {{progress[file.name]}}%\\\">\\n\\t\\t    </div>\\n                 </div>\\n                 <span class=\\\"size\\\">{{file.size}} Bytes</span>\\n           </div>\\n    </li>\\n    </div>\\n </section>\\n\\n</div>\\n\\n\", dependencies: [{ kind: \"component\", type: i2.FaIconComponent, selector: \"fa-icon\", inputs: [\"icon\", \"title\", \"spin\", \"pulse\", \"mask\", \"styles\", \"flip\", \"size\", \"pull\", \"border\", \"inverse\", \"symbol\", \"rotate\", \"fixedWidth\", \"classes\", \"transform\", \"a11yRole\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'lib-progress-up', template: \"\\n<div class=\\\"progress-up-wrapper\\\">\\n\\n <div class='text-center'>\\n   <button (click)=\\\"clearAll()\\\" class=\\\"clearButton\\\" role=\\\"button\\\">Clear all</button>\\n </div>\\n\\n <form class='progress-up-form' action=\\\"#\\\">\\n      <input type=\\\"file\\\" #fileInput (change)=\\\"onFileUpload($event)\\\" multiple hidden />\\n        <span (click)=\\\"fileInput.click()\\\" >\\n\\t<fa-icon [icon]=\\\"faCloudUploadAlt\\\" size=\\\"8x\\\"></fa-icon>\\n        <h2>Browse Files to Upload</h2>\\n\\t</span>\\n </form>\\n\\n <section *ngIf=\\\"showProgress\\\" class='progress-up-area' >\\n   <div *ngFor=\\\"let file of uploadFiles\\\">\\n    <li class=\\\"row\\\">\\n        <fa-icon [icon]=\\\"faFileAlt\\\"></fa-icon>\\n          <div class=\\\"content\\\">\\n                <div class=\\\"details\\\">\\n                   <span class=\\\"name\\\">{{file.name}} </span>\\n                    <span class=\\\"percent\\\">{{progress[file.name]}} %</span>\\n                 </div>\\n                 <div class=\\\"progress-bar\\\">\\n                    <div class=\\\"progress\\\" style=\\\"width: {{progress[file.name]}}%\\\">\\n\\t\\t    </div>\\n                 </div>\\n                 <span class=\\\"size\\\">{{file.size}} Bytes</span>\\n           </div>\\n    </li>\\n    </div>\\n </section>\\n\\n</div>\\n\\n\" }]\n        }], ctorParameters: function () { return [{ type: ProgressUpService }]; } });\n\nclass ProgressUpModule {\n}\nProgressUpModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nProgressUpModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpModule, declarations: [ProgressUpComponent], imports: [FontAwesomeModule], exports: [ProgressUpComponent] });\nProgressUpModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpModule, imports: [FontAwesomeModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        ProgressUpComponent\n                    ],\n                    imports: [\n                        FontAwesomeModule\n                    ],\n                    exports: [\n                        ProgressUpComponent\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of progress-up\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ProgressUpComponent, ProgressUpModule, ProgressUpService };\n//# sourceMappingURL=progress-up.mjs.map\n","map":{"version":3,"file":"progress-up.mjs","sources":["../../../projects/progress-up/src/lib/progress-up.service.ts","../../../projects/progress-up/src/lib/progress-up.component.ts","../../../projects/progress-up/src/lib/progress-up.component.html","../../../projects/progress-up/src/lib/progress-up.module.ts","../../../projects/progress-up/src/public-api.ts","../../../projects/progress-up/src/progress-up.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ProgressUpService {\n\n  constructor(private http: HttpClient) { }\n\n  config = {\n\tfilesArray: \"mFiles\",\n\tuploadURL: \"https://localhost:2324/uploadmultiple\"\n  };\n  upload(file: File): Observable<HttpEvent<any>> {\n    const formData: FormData = new FormData();\n\n    formData.append(this.config.filesArray, file);\n    const req = new HttpRequest('POST', this.config.uploadURL, formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n\n    return this.http.request(req);\n  }\n\n}\n","import {\n    Component,\n} from '@angular/core';\nimport {\n    ProgressUpService\n} from './progress-up.service';\nimport { faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faFileAlt } from '@fortawesome/free-solid-svg-icons';\nimport {\n    HttpEvent,\n    HttpEventType,\n    HttpResponse\n} from '@angular/common/http';\nimport {\n    Observable\n} from 'rxjs';\n\n@Component({\n  selector: 'lib-progress-up',\n    templateUrl: './progress-up.component.html',\n})\n\nexport class ProgressUpComponent {\n    progress: any = {};\n    showProgress:boolean = true;\n    fileLoaded = 0;\n    faFileAlt = faFileAlt;\n    faCloudUploadAlt = faCloudUploadAlt;\n    uploadFiles: any = [];\n\n    constructor(private uploadService: ProgressUpService) {}\n\n    uploadOneFile(file: File) {\n\n        this.uploadService.upload(file).subscribe(\n            (event: HttpEvent < any > ) => {\n                if (event.type === HttpEventType.UploadProgress) {\n                    if (event.total) {\n                        const total: number = event.total;\n                        this.progress[file.name] = Math.round(100 * event.loaded / total);\n                    }\n                } else if (event instanceof HttpResponse) {\n                    console.log(event);\n                }\n            },\n            err => {\n                this.progress[file.name] = 0;\n            });\n    }\n\n    onFileUpload(event: any) {\n        let files = (event.target as HTMLInputElement).files;\n        if (files) {\n            for (let i = 0; i < files.length; i++) {\n                let file = files[i];\n                this.uploadOneFile(file);\n                this.uploadFiles.push(file);\n            }\n        }\n    }\n\n    clearAll() {\n        this.showProgress = false;\n    }\n}\n","\n<div class=\"progress-up-wrapper\">\n\n <div class='text-center'>\n   <button (click)=\"clearAll()\" class=\"clearButton\" role=\"button\">Clear all</button>\n </div>\n\n <form class='progress-up-form' action=\"#\">\n      <input type=\"file\" #fileInput (change)=\"onFileUpload($event)\" multiple hidden />\n        <span (click)=\"fileInput.click()\" >\n\t<fa-icon [icon]=\"faCloudUploadAlt\" size=\"8x\"></fa-icon>\n        <h2>Browse Files to Upload</h2>\n\t</span>\n </form>\n\n <section *ngIf=\"showProgress\" class='progress-up-area' >\n   <div *ngFor=\"let file of uploadFiles\">\n    <li class=\"row\">\n        <fa-icon [icon]=\"faFileAlt\"></fa-icon>\n          <div class=\"content\">\n                <div class=\"details\">\n                   <span class=\"name\">{{file.name}} </span>\n                    <span class=\"percent\">{{progress[file.name]}} %</span>\n                 </div>\n                 <div class=\"progress-bar\">\n                    <div class=\"progress\" style=\"width: {{progress[file.name]}}%\">\n\t\t    </div>\n                 </div>\n                 <span class=\"size\">{{file.size}} Bytes</span>\n           </div>\n    </li>\n    </div>\n </section>\n\n</div>\n\n","import { NgModule } from '@angular/core';\nimport { ProgressUpComponent } from './progress-up.component';\nimport {FontAwesomeModule} from '@fortawesome/angular-fontawesome';\n\n\n@NgModule({\n  declarations: [\n    ProgressUpComponent\n  ],\n  imports: [\n    FontAwesomeModule\n  ],\n  exports: [\n    ProgressUpComponent\n  ]\n})\nexport class ProgressUpModule { }\n","/*\n * Public API Surface of progress-up\n */\n\nexport * from './lib/progress-up.service';\nexport * from './lib/progress-up.component';\nexport * from './lib/progress-up.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.ProgressUpService"],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpRequest, HttpEventType, HttpResponse } from '@angular/common/http';\nimport { faFileAlt, faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\nimport * as i2 from '@fortawesome/angular-fontawesome';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\nclass ProgressUpService {\n    constructor(http) {\n        this.http = http;\n        this.config = {\n            filesArray: \"mFiles\",\n            uploadURL: \"https://localhost:2324/uploadmultiple\"\n        };\n    }\n    upload(file) {\n        const formData = new FormData();\n        formData.append(this.config.filesArray, file);\n        const req = new HttpRequest('POST', this.config.uploadURL, formData, {\n            reportProgress: true,\n            responseType: 'json'\n        });\n        return this.http.request(req);\n    }\n}\nProgressUpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\nProgressUpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\nclass ProgressUpComponent {\n    constructor(uploadService) {\n        this.uploadService = uploadService;\n        this.progress = {};\n        this.showProgress = true;\n        this.fileLoaded = 0;\n        this.faFileAlt = faFileAlt;\n        this.faCloudUploadAlt = faCloudUploadAlt;\n        this.uploadFiles = [];\n    }\n    uploadOneFile(file) {\n        this.uploadService.upload(file).subscribe((event) => {\n            if (event.type === HttpEventType.UploadProgress) {\n                if (event.total) {\n                    const total = event.total;\n                    this.progress[file.name] = Math.round(100 * event.loaded / total);\n                }\n            }\n            else if (event instanceof HttpResponse) {\n                console.log(event);\n            }\n        }, err => {\n            this.progress[file.name] = 0;\n        });\n    }\n    onFileUpload(event) {\n        let files = event.target.files;\n        if (files) {\n            for (let i = 0; i < files.length; i++) {\n                let file = files[i];\n                this.uploadOneFile(file);\n                this.uploadFiles.push(file);\n            }\n        }\n    }\n    clearAll() {\n        this.showProgress = false;\n    }\n}\nProgressUpComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpComponent, deps: [{ token: ProgressUpService }], target: i0.ɵɵFactoryTarget.Component });\nProgressUpComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.8\", type: ProgressUpComponent, selector: \"lib-progress-up\", ngImport: i0, template: \"\\n<div class=\\\"progress-up-wrapper\\\">\\n\\n <div class='text-center'>\\n   <button (click)=\\\"clearAll()\\\" class=\\\"clearButton\\\" role=\\\"button\\\">Clear all</button>\\n </div>\\n\\n <form class='progress-up-form' action=\\\"#\\\">\\n      <input type=\\\"file\\\" #fileInput (change)=\\\"onFileUpload($event)\\\" multiple hidden />\\n        <span (click)=\\\"fileInput.click()\\\" >\\n\\t<fa-icon [icon]=\\\"faCloudUploadAlt\\\" size=\\\"8x\\\"></fa-icon>\\n        <h2>Browse Files to Upload</h2>\\n\\t</span>\\n </form>\\n\\n <section *ngIf=\\\"showProgress\\\" class='progress-up-area' >\\n   <div *ngFor=\\\"let file of uploadFiles\\\">\\n    <li class=\\\"row\\\">\\n        <fa-icon [icon]=\\\"faFileAlt\\\"></fa-icon>\\n          <div class=\\\"content\\\">\\n                <div class=\\\"details\\\">\\n                   <span class=\\\"name\\\">{{file.name}} </span>\\n                    <span class=\\\"percent\\\">{{progress[file.name]}} %</span>\\n                 </div>\\n                 <div class=\\\"progress-bar\\\">\\n                    <div class=\\\"progress\\\" style=\\\"width: {{progress[file.name]}}%\\\">\\n\\t\\t    </div>\\n                 </div>\\n                 <span class=\\\"size\\\">{{file.size}} Bytes</span>\\n           </div>\\n    </li>\\n    </div>\\n </section>\\n\\n</div>\\n\\n\", dependencies: [{ kind: \"component\", type: i2.FaIconComponent, selector: \"fa-icon\", inputs: [\"icon\", \"title\", \"spin\", \"pulse\", \"mask\", \"styles\", \"flip\", \"size\", \"pull\", \"border\", \"inverse\", \"symbol\", \"rotate\", \"fixedWidth\", \"classes\", \"transform\", \"a11yRole\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'lib-progress-up', template: \"\\n<div class=\\\"progress-up-wrapper\\\">\\n\\n <div class='text-center'>\\n   <button (click)=\\\"clearAll()\\\" class=\\\"clearButton\\\" role=\\\"button\\\">Clear all</button>\\n </div>\\n\\n <form class='progress-up-form' action=\\\"#\\\">\\n      <input type=\\\"file\\\" #fileInput (change)=\\\"onFileUpload($event)\\\" multiple hidden />\\n        <span (click)=\\\"fileInput.click()\\\" >\\n\\t<fa-icon [icon]=\\\"faCloudUploadAlt\\\" size=\\\"8x\\\"></fa-icon>\\n        <h2>Browse Files to Upload</h2>\\n\\t</span>\\n </form>\\n\\n <section *ngIf=\\\"showProgress\\\" class='progress-up-area' >\\n   <div *ngFor=\\\"let file of uploadFiles\\\">\\n    <li class=\\\"row\\\">\\n        <fa-icon [icon]=\\\"faFileAlt\\\"></fa-icon>\\n          <div class=\\\"content\\\">\\n                <div class=\\\"details\\\">\\n                   <span class=\\\"name\\\">{{file.name}} </span>\\n                    <span class=\\\"percent\\\">{{progress[file.name]}} %</span>\\n                 </div>\\n                 <div class=\\\"progress-bar\\\">\\n                    <div class=\\\"progress\\\" style=\\\"width: {{progress[file.name]}}%\\\">\\n\\t\\t    </div>\\n                 </div>\\n                 <span class=\\\"size\\\">{{file.size}} Bytes</span>\\n           </div>\\n    </li>\\n    </div>\\n </section>\\n\\n</div>\\n\\n\" }]\n        }], ctorParameters: function () { return [{ type: ProgressUpService }]; } });\n\nclass ProgressUpModule {\n}\nProgressUpModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nProgressUpModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpModule, declarations: [ProgressUpComponent], imports: [FontAwesomeModule], exports: [ProgressUpComponent] });\nProgressUpModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpModule, imports: [FontAwesomeModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: ProgressUpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        ProgressUpComponent\n                    ],\n                    imports: [\n                        FontAwesomeModule\n                    ],\n                    exports: [\n                        ProgressUpComponent\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of progress-up\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ProgressUpComponent, ProgressUpModule, ProgressUpService };\n//# sourceMappingURL=progress-up.mjs.map\n","map":{"version":3,"file":"progress-up.mjs","sources":["../../../projects/progress-up/src/lib/progress-up.service.ts","../../../projects/progress-up/src/lib/progress-up.component.ts","../../../projects/progress-up/src/lib/progress-up.component.html","../../../projects/progress-up/src/lib/progress-up.module.ts","../../../projects/progress-up/src/public-api.ts","../../../projects/progress-up/src/progress-up.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ProgressUpService {\n\n  constructor(private http: HttpClient) { }\n\n  config = {\n\tfilesArray: \"mFiles\",\n\tuploadURL: \"https://localhost:2324/uploadmultiple\"\n  };\n  upload(file: File): Observable<HttpEvent<any>> {\n    const formData: FormData = new FormData();\n\n    formData.append(this.config.filesArray, file);\n    const req = new HttpRequest('POST', this.config.uploadURL, formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n\n    return this.http.request(req);\n  }\n\n}\n","import {\n    Component,\n} from '@angular/core';\nimport {\n    ProgressUpService\n} from './progress-up.service';\nimport { faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faFileAlt } from '@fortawesome/free-solid-svg-icons';\nimport {\n    HttpEvent,\n    HttpEventType,\n    HttpResponse\n} from '@angular/common/http';\nimport {\n    Observable\n} from 'rxjs';\n\n@Component({\n  selector: 'lib-progress-up',\n    templateUrl: './progress-up.component.html',\n})\n\nexport class ProgressUpComponent {\n    progress: any = {};\n    showProgress:boolean = true;\n    fileLoaded = 0;\n    faFileAlt = faFileAlt;\n    faCloudUploadAlt = faCloudUploadAlt;\n    uploadFiles: any = [];\n\n    constructor(private uploadService: ProgressUpService) {}\n\n    uploadOneFile(file: File) {\n\n        this.uploadService.upload(file).subscribe(\n            (event: HttpEvent < any > ) => {\n                if (event.type === HttpEventType.UploadProgress) {\n                    if (event.total) {\n                        const total: number = event.total;\n                        this.progress[file.name] = Math.round(100 * event.loaded / total);\n                    }\n                } else if (event instanceof HttpResponse) {\n                    console.log(event);\n                }\n            },\n            err => {\n                this.progress[file.name] = 0;\n            });\n    }\n\n    onFileUpload(event: any) {\n        let files = (event.target as HTMLInputElement).files;\n        if (files) {\n            for (let i = 0; i < files.length; i++) {\n                let file = files[i];\n                this.uploadOneFile(file);\n                this.uploadFiles.push(file);\n            }\n        }\n    }\n\n    clearAll() {\n        this.showProgress = false;\n    }\n}\n","\n<div class=\"progress-up-wrapper\">\n\n <div class='text-center'>\n   <button (click)=\"clearAll()\" class=\"clearButton\" role=\"button\">Clear all</button>\n </div>\n\n <form class='progress-up-form' action=\"#\">\n      <input type=\"file\" #fileInput (change)=\"onFileUpload($event)\" multiple hidden />\n        <span (click)=\"fileInput.click()\" >\n\t<fa-icon [icon]=\"faCloudUploadAlt\" size=\"8x\"></fa-icon>\n        <h2>Browse Files to Upload</h2>\n\t</span>\n </form>\n\n <section *ngIf=\"showProgress\" class='progress-up-area' >\n   <div *ngFor=\"let file of uploadFiles\">\n    <li class=\"row\">\n        <fa-icon [icon]=\"faFileAlt\"></fa-icon>\n          <div class=\"content\">\n                <div class=\"details\">\n                   <span class=\"name\">{{file.name}} </span>\n                    <span class=\"percent\">{{progress[file.name]}} %</span>\n                 </div>\n                 <div class=\"progress-bar\">\n                    <div class=\"progress\" style=\"width: {{progress[file.name]}}%\">\n\t\t    </div>\n                 </div>\n                 <span class=\"size\">{{file.size}} Bytes</span>\n           </div>\n    </li>\n    </div>\n </section>\n\n</div>\n\n","import { NgModule } from '@angular/core';\nimport { ProgressUpComponent } from './progress-up.component';\nimport {FontAwesomeModule} from '@fortawesome/angular-fontawesome';\n\n\n@NgModule({\n  declarations: [\n    ProgressUpComponent\n  ],\n  imports: [\n    FontAwesomeModule\n  ],\n  exports: [\n    ProgressUpComponent\n  ]\n})\nexport class ProgressUpModule { }\n","/*\n * Public API Surface of progress-up\n */\n\nexport * from './lib/progress-up.service';\nexport * from './lib/progress-up.component';\nexport * from './lib/progress-up.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.ProgressUpService"],"mappings":"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"}}}